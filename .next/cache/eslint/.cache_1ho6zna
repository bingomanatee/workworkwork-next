[{"/Users/davidedelhart/Documents/repos/workworkwork-next/src/components/CountryMap.jsx":"1","/Users/davidedelhart/Documents/repos/workworkwork-next/src/components/DataScale.jsx":"2","/Users/davidedelhart/Documents/repos/workworkwork-next/src/components/DelayedDataTable.jsx":"3","/Users/davidedelhart/Documents/repos/workworkwork-next/src/components/DeleteButton.js":"4","/Users/davidedelhart/Documents/repos/workworkwork-next/src/components/EditButton.jsx":"5","/Users/davidedelhart/Documents/repos/workworkwork-next/src/components/EditTask.jsx":"6","/Users/davidedelhart/Documents/repos/workworkwork-next/src/components/EditTaskType.jsx":"7","/Users/davidedelhart/Documents/repos/workworkwork-next/src/components/FormCloseButton.jsx":"8","/Users/davidedelhart/Documents/repos/workworkwork-next/src/components/FormLabel.js":"9","/Users/davidedelhart/Documents/repos/workworkwork-next/src/components/Hex.js":"10","/Users/davidedelhart/Documents/repos/workworkwork-next/src/components/Iso3Label.jsx":"11","/Users/davidedelhart/Documents/repos/workworkwork-next/src/components/JsonNode.jsx":"12","/Users/davidedelhart/Documents/repos/workworkwork-next/src/components/LabelValue.js":"13","/Users/davidedelhart/Documents/repos/workworkwork-next/src/components/LocationMap.jsx":"14","/Users/davidedelhart/Documents/repos/workworkwork-next/src/components/ModelContext.jsx":"15","/Users/davidedelhart/Documents/repos/workworkwork-next/src/components/OptionBox.jsx":"16","/Users/davidedelhart/Documents/repos/workworkwork-next/src/components/ParentButton.jsx":"17","/Users/davidedelhart/Documents/repos/workworkwork-next/src/components/SaveButton.jsx":"18","/Users/davidedelhart/Documents/repos/workworkwork-next/src/components/TaskEvents.jsx":"19","/Users/davidedelhart/Documents/repos/workworkwork-next/src/components/TaskNodes.js":"20","/Users/davidedelhart/Documents/repos/workworkwork-next/src/components/TicketCell.jsx":"21","/Users/davidedelhart/Documents/repos/workworkwork-next/src/components/TitleBar.jsx":"22","/Users/davidedelhart/Documents/repos/workworkwork-next/src/components/model.js":"23","/Users/davidedelhart/Documents/repos/workworkwork-next/src/components/ux-constants.js":"24","/Users/davidedelhart/Documents/repos/workworkwork-next/src/grommet-theme.js":"25","/Users/davidedelhart/Documents/repos/workworkwork-next/src/pages/_app.jsx":"26","/Users/davidedelhart/Documents/repos/workworkwork-next/src/pages/_document.js":"27","/Users/davidedelhart/Documents/repos/workworkwork-next/src/pages/index.jsx":"28","/Users/davidedelhart/Documents/repos/workworkwork-next/src/pages/locations.jsx":"29","/Users/davidedelhart/Documents/repos/workworkwork-next/src/pages/logs.js":"30","/Users/davidedelhart/Documents/repos/workworkwork-next/src/pages/navigation.jsx":"31","/Users/davidedelhart/Documents/repos/workworkwork-next/src/pages/taskTypes/Ticket.jsx":"32","/Users/davidedelhart/Documents/repos/workworkwork-next/src/pages/taskTypes/edit/[id].jsx":"33","/Users/davidedelhart/Documents/repos/workworkwork-next/src/pages/taskTypes/index.js":"34","/Users/davidedelhart/Documents/repos/workworkwork-next/src/pages/tasks.js":"35"},{"size":13792,"mtime":1660586524581,"results":"36","hashOfConfig":"37"},{"size":641,"mtime":1660636484684,"results":"38","hashOfConfig":"37"},{"size":338,"mtime":1660513581567,"results":"39","hashOfConfig":"37"},{"size":339,"mtime":1658017623012,"results":"40","hashOfConfig":"37"},{"size":350,"mtime":1658095614257,"results":"41","hashOfConfig":"37"},{"size":2517,"mtime":1660593026247,"results":"42","hashOfConfig":"37"},{"size":4675,"mtime":1660592988411,"results":"43","hashOfConfig":"37"},{"size":226,"mtime":1658033580050,"results":"44","hashOfConfig":"37"},{"size":581,"mtime":1658040762670,"results":"45","hashOfConfig":"37"},{"size":1593,"mtime":1659723176277,"results":"46","hashOfConfig":"37"},{"size":602,"mtime":1658994980563,"results":"47","hashOfConfig":"37"},{"size":774,"mtime":1658702918803,"results":"48","hashOfConfig":"37"},{"size":1074,"mtime":1658095166723,"results":"49","hashOfConfig":"37"},{"size":8013,"mtime":1660586524583,"results":"50","hashOfConfig":"37"},{"size":114,"mtime":1658550966380,"results":"51","hashOfConfig":"37"},{"size":222,"mtime":1658035338619,"results":"52","hashOfConfig":"37"},{"size":311,"mtime":1658017625194,"results":"53","hashOfConfig":"37"},{"size":277,"mtime":1658040762660,"results":"54","hashOfConfig":"37"},{"size":486,"mtime":1660592918284,"results":"55","hashOfConfig":"37"},{"size":2812,"mtime":1660586524584,"results":"56","hashOfConfig":"37"},{"size":626,"mtime":1660593578655,"results":"57","hashOfConfig":"37"},{"size":636,"mtime":1658986249246,"results":"58","hashOfConfig":"37"},{"size":12313,"mtime":1660636484681,"results":"59","hashOfConfig":"37"},{"size":3308,"mtime":1658095392633,"results":"60","hashOfConfig":"37"},{"size":5096,"mtime":1658017466043,"results":"61","hashOfConfig":"37"},{"size":1071,"mtime":1660539055432,"results":"62","hashOfConfig":"37"},{"size":1452,"mtime":1658543327505,"results":"63","hashOfConfig":"37"},{"size":7400,"mtime":1660674720541,"results":"64","hashOfConfig":"37"},{"size":5431,"mtime":1660513606218,"results":"65","hashOfConfig":"37"},{"size":456,"mtime":1660593190627,"results":"66","hashOfConfig":"37"},{"size":867,"mtime":1660515280833,"results":"67","hashOfConfig":"37"},{"size":1155,"mtime":1660593578659,"results":"68","hashOfConfig":"37"},{"size":5123,"mtime":1660592816558,"results":"69","hashOfConfig":"37"},{"size":3093,"mtime":1658092178303,"results":"70","hashOfConfig":"37"},{"size":3655,"mtime":1658707737328,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},"izo9x0",{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109"},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113"},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","suppressedMessages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139"},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143"},{"filePath":"144","messages":"145","suppressedMessages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150"},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157"},{"filePath":"158","messages":"159","suppressedMessages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161"},{"filePath":"162","messages":"163","suppressedMessages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165"},{"filePath":"166","messages":"167","suppressedMessages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169"},{"filePath":"170","messages":"171","suppressedMessages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173"},{"filePath":"174","messages":"175","suppressedMessages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","suppressedMessages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","suppressedMessages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183"},{"filePath":"184","messages":"185","suppressedMessages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187"},{"filePath":"188","messages":"189","suppressedMessages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","suppressedMessages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194"},"/Users/davidedelhart/Documents/repos/workworkwork-next/src/components/CountryMap.jsx",["195","196"],[],"import React, { Component } from 'react';\nimport _ from 'lodash';\nimport * as PIXI from 'pixi.js';\nimport { Box, Button, Stack, Text, TextInput } from 'grommet';\nimport { constants } from '@wonderlandlabs/carpenter';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport XYZ from 'ol/source/XYZ';\nimport ModelContext from './ModelContext';\n\nconst { binaryOperator } = constants;\nconst BACKGROUND_COLOR = PIXI.utils.rgb2hex([0.33, 0.25, 0]);\nconst HEX_LINE_COLOR = PIXI.utils.rgb2hex([0.5, 0, 0]);\nconst HAS_LOC_COLOR = PIXI.utils.rgb2hex([0.25, 0.125, 0]);\nconst BLACK = PIXI.utils.rgb2hex([0, 0, 0]);\nconst DARK_BLUE = PIXI.utils.rgb2hex([0, 0, 0.4]);\nconst PIX_PER_DEG = 5;\nconst RED = PIXI.utils.rgb2hex([1, 0, 0]);\nconst BEIGE = PIXI.utils.rgb2hex([0, 0.5, 0, 7]);\n\nfunction lerp(n, min, max, scale = 1) {\n  const dist = max - min;\n  return scale * _.clamp((n - min) / dist, 0, 1);\n}\n\nexport class CountryMap extends Component {\n  constructor(props) {\n    super(props);\n    this.myRef = React.createRef();\n\n    this.changeCountry = this.changeCountry.bind(this);\n    this.nextCountry = this.nextCountry.bind(this);\n    this.beginWorkOnCurrentCountry = this.beginWorkOnCurrentCountry.bind(this);\n    this.state = {\n      country: null,\n      hexIndex: 0,\n      countryHexes: [],\n    };\n  }\n\n  componentDidMount() {\n    this.init();\n  }\n\n  componentDidUpdate() {\n    // this.draw();\n  }\n\n  componentWillUnmount() {\n    this.unmounted = true;\n  }\n\n  // ------- utility\n\n  degToXY(lat, lon) {\n    if (typeof lat === 'object') {\n      return this.degToXY(lat.lt, lat.ln);\n    }\n    const [minLat, minLon, maxLat, maxLon] = this.extent;\n    const x = lerp(lon, minLat, maxLat, this.width);\n    const y = this.height - lerp(lat, minLon, maxLon, this.height);\n    return { x, y };\n  }\n\n  weighRect() {\n    try {\n      const imageData = this.getImageData();\n      const chunks = _.chunk(imageData.data, 4);\n\n      return chunks.map(([r, g, b, a]) => a * (255 - r))\n        .reduce((s, v) => s + v, 0);\n    } catch (err) {\n      return 0;\n    }\n  }\n\n  getImageData() {\n    const canvas = this.app.renderer.plugins.extract.canvas(this.countryContainer);\n    const context = canvas.getContext('2d');\n    const imgData = context.getImageData(0, 0, this.width, this.height);\n    return imgData;\n  }\n\n  /**\n   *\n   * @param hex {Object} // a record\n   * @param mode {string}\n   * @param iso3 {string|undefined}\n   * @returns {Graphics}\n   */\n  hexGraphics(hex, mode = 'line', iso3, color = BLACK) {\n    const graphics = new PIXI.Graphics();\n\n    hex.data.shapes.forEach((s) => {\n      if (mode === 'line') {\n        graphics.lineStyle(1, HEX_LINE_COLOR);\n      } else {\n        graphics.beginFill(color);\n      }\n\n      const points = s.points.map((p) => this.degToXY(p));\n      const lastPoint = points[points.length - 1];\n\n      graphics.moveTo(lastPoint.x, lastPoint.y);\n      points.forEach((p) => {\n        graphics.lineTo(p.x, p.y);\n      });\n\n      graphics.closePath();\n      graphics.endFill();\n    });\n\n\n    if (iso3) {\n      const alpha = this.model.hexStrength(hex, iso3);\n      console.log('alpha = ', alpha);\n      graphics.alpha = alpha;\n    }\n\n    return graphics;\n  }\n\n  get width() {\n    return 360 * PIX_PER_DEG;\n  }\n\n  get height() {\n    return 180 * PIX_PER_DEG;\n  }\n\n  // ------ general map drawing\n\n  drawCountryName(country) {\n    const { name, latitude, longitude } = country;\n    const nameSprite = new PIXI.Text(name, { fontFamily: 'Arial', fontSize: 20, fill: DARK_BLUE, align: 'center' });\n    const point = this.degToXY(latitude, longitude);\n    nameSprite.position = point;\n    this.countryContainer.addChild(nameSprite);\n    return nameSprite;\n  }\n\n  drawCountry(country, color = BLACK, alpha = 1) {\n    const { shapes } = country;\n    const countryShape = new PIXI.Container();\n    this.countryContainer.addChild(countryShape);\n    countryShape.alpha = alpha;\n    let g = new PIXI.Graphics();\n    let pointCount = 0;\n    for (const shape of shapes) {\n      if (shape.points.shape.length > 3) {\n        g.beginFill(color);\n        const points = shape.points.shape.map((pt) => this.degToXY(pt.lt, pt.ln));\n        const last = points[points.length - 1];\n        g.moveTo(last.x, last.y);\n        for (const p of points) {\n          g.lineTo(p.x, p.y);\n          pointCount += 1;\n        }\n        g.endFill();\n        if (pointCount > 40) {\n          countryShape.addChild(g);\n          g = new PIXI.Graphics();\n          pointCount = 0;\n        }\n      }\n    }\n    countryShape.addChild(g);\n    return countryShape;\n  }\n\n  drawHex(hex, mode = 'line', iso3) {\n    this.hexContainer.addChild(this.hexGraphics(hex, mode, iso3));\n  }\n\n  drawHexes() {\n    const records = this.props.hexes;\n    records.forEach((hex) => {\n      this.drawHex(hex);\n    });\n  }\n\n  drawFill() {\n    this.filler.clear();\n    this.filler.beginFill(PIXI.utils.rgb2hex([1, 0.5, 0]))\n      .drawRect(0, 0, this.width, this.height)\n      .endFill();\n  }\n\n  drawGrid() {\n    this.lines.clear();\n    this.lines.lineStyle(1, PIXI.utils.rgb2hex([1, 1, 1]), 0.125);\n\n    for (let lat = -90; lat <= 90; lat += 10) {\n      const start = this.degToXY(lat, -180);\n      const end = this.degToXY(lat, 180);\n      this.lines.moveTo(start.x, start.y).lineTo(end.x, end.y);\n    }\n\n\n    for (let lon = -180; lon <= 180; lon += 10) {\n      const start = this.degToXY(-90, lon);\n      const end = this.degToXY(90, lon);\n      this.lines.moveTo(start.x, start.y).lineTo(end.x, end.y);\n    }\n\n    this.lines.lineStyle(2, PIXI.utils.rgb2hex([1, 1, 1]), 0.25);\n\n    [[[-180, 0], [180, 0]], [[0, -90], [0, 90]]].forEach(([[lon, lat], [lon2, lat2]]) => {\n      const start = this.degToXY(lat, lon);\n      const end = this.degToXY(lat2, lon2);\n      this.lines.moveTo(start.x, start.y).lineTo(end.x, end.y);\n    });\n  }\n\n  drawCountries() {\n    this.countryContainer.removeChildren();\n    this.props.countries.forEach((country) => this.drawCountryName(country.data));\n    this.drawCountry(this.model.base.table('countries').getData('BRA'), BLACK);\n    this.drawCountry(this.model.base.table('countries').getData('CAN'), BLACK);\n  }\n\n  draw() {\n    if (!this.app) {\n      return;\n    }\n    this.hexContainer.alpha = 0.15;\n    this.extent = this.map.getView().calculateExtent(this.map.getSize());\n    this.drawFill();\n    this.drawHexes();\n    this.drawGrid();\n    this.drawCountries();\n    this.app.render();\n  }\n\n  init() {\n    // Create the application\n    if (!this.app && this.myRef.current && this.height) {\n\n      this.app = new PIXI.Application({\n        width: this.width,\n        height: this.height,\n        backgroundAlpha: 0,\n        resizeTo: this.myRef.current,\n        forceCanvas: true,\n      });\n\n      this.filler = new PIXI.Graphics();\n      this.filler.alpha = 0;\n      this.app.stage.addChild(this.filler);\n      this.hexContainer = new PIXI.Container();\n      this.hexContainer.alpha = 0.15;\n      this.app.stage.addChild(this.hexContainer);\n      this.lines = new PIXI.Graphics();\n      this.app.stage.addChild(this.lines);\n      this.countryContainer = new PIXI.Container();\n      this.app.stage.addChild(this.countryContainer);\n      this.myRef.current.appendChild(this.app.view);\n\n      this.drawMap();\n      this.draw();\n      // Add the view to the DOM\n      this.myRef.current.appendChild(this.app.view);\n    }\n  }\n\n  drawMap() {\n    this.map = new Map({\n      target: 'map-image',\n      layers: [\n        new TileLayer({\n          source: new XYZ({\n            url: 'https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n          }),\n        }),\n      ],\n      view: new View({\n        center: [0, 0],\n        zoom: 0,\n        extent: [-180, -90, 180, 90],\n        projection: 'EPSG:4326',\n      }),\n    });\n  }\n\n  // ----------- hex / country mapping\n\n  changeCountry(event) {\n    this.setState((state) => {\n      state.iso3 = event.target.value;\n      return state;\n    });\n  }\n\n  beginWorkOnCurrentCountry() {\n    this.hexContainer.removeChildren();\n    this.countryContainer.removeChildren();\n    this.app.render();\n    requestAnimationFrame(() => {\n      this.setState((state) => {\n        const country = this.model.base.table('countries').getData(state.iso3);\n        const hexes = this.model.findHexesAround(country);\n\n        state.countryHexes = hexes;\n        state.country = country;\n\n        return { ...state, countryHexes: hexes, hexIndex: 0 };\n      }, () => {\n        this.workCountryHexes();\n      });\n    });\n  }\n\n  workCountryHexes() {\n    const { countryHexes, hexIndex } = this.state;\n    if (hexIndex >= countryHexes.length) {\n      this.allHexesDone();\n    } else {\n      this.setState({ currentHex: countryHexes[hexIndex] }, () => {\n        this.workCurrentHex();\n      });\n    }\n  }\n\n  allHexesDone() {\n    this.drawCountryHexes();\n    this.app.render();\n    this.setState({ 'drawnHexes': this.state.iso3 });\n    setTimeout(() => {\n      this.nextCountry();\n    }, 1000);\n  }\n\n  /**\n   * after all the hexes have been analyzed,\n   * draw a representation of the country with hex weights\n   */\n  drawCountryHexes() {\n    const { country, countryHexes } = this.state;\n    this.filler.clear();\n    this.hexContainer.alpha = 1;\n    this.hexContainer.removeChildren();\n    this.countryContainer.removeChildren();\n    this.drawCountry(country, RED, 0.2);\n    countryHexes.filter((hex) => hex.data.countryShares.size > 0)\n      .forEach((hex) => {\n        this.drawHex(hex, 'fill', country.iso3);\n      });\n    this.app.render();\n  }\n\n async nextCountry() {\n    const { country } = this.state;\n    if (country) country.hexesDone = true;\n    await this.model.pollCountries();\n    const workableCountries = this.model.base.query({\n      tableName: 'countries',\n      where(record) {\n        const { hexesDone = false, hex_shares = [] } = record.data;\n        if (hexesDone) {\n          return false;\n        }\n        if (hex_shares.length) {\n          return false;\n        }\n        return true;\n      },\n    });\n\n    console.log('remaining countries:', workableCountries.length);\n\n    if (workableCountries.length) {\n\n      this.setState((state) => {\n        const byPop = _.sortBy(workableCountries, (c => c.data.population * -1)).slice(0, 10);\n        state.iso3 = _.shuffle(byPop).pop().key;\n        return state;\n      }, () => this.beginWorkOnCurrentCountry());\n    } else {\n      console.log('---- all countries found');\n    }\n  }\n\n  findShareOfCurrentHex() {\n    const { country, currentHex } = this.state;\n    this.countryContainer.removeChildren();\n    const shape = this.drawCountry(country, true);\n    const hexImage = this.hexGraphics(currentHex, 'fill');\n    shape.mask = new PIXI.MaskData(hexImage);\n    this.app.render();\n    return this.weighRect(shape, shape.getBounds());\n  }\n\n  workCurrentHex() {\n    const { country, currentHex } = this.state;\n    requestAnimationFrame(() => {\n      const countryWeight = this.findShareOfCurrentHex();\n      if (countryWeight) {\n        currentHex.data.countryShares.set(country.iso3, countryWeight);\n        this.countryContainer.removeChildren();\n        if (!currentHex.data.countryShares.has('_BASE')) {\n          this.findCurrentHexBase();\n        } else {\n          this.finishCurrentHex();\n        }\n      } else {\n        this.finishCurrentHex();\n      }\n    });\n\n  }\n\n  finishCurrentHex() {\n    const { countryHexes, hexIndex, iso3, currentHex } = this.state;\n    this.model.sendCurrentHexShare(iso3,\n      currentHex.key,\n      currentHex.data.countryShares.get(iso3),\n      currentHex.data.countryShares.get('_BASE_'));\n    if (countryHexes.length === hexIndex + 1) {\n      this.allHexesDone();\n    } else {\n      this.setState({ hexIndex: hexIndex + 1 }, () => {\n        this.workCountryHexes();\n      });\n    }\n  }\n\n  findCurrentHexBase() {\n    requestAnimationFrame(() => {\n      const { currentHex } = this.state;\n      this.countryContainer.removeChildren();\n      const hexFull = this.hexGraphics(currentHex, 'fill', null, BEIGE);\n      this.countryContainer.addChild(hexFull);\n      this.app.render();\n\n      const baseWeight = this.weighRect(hexFull.getBounds());\n      currentHex.data.countryShares.set('_BASE_', baseWeight);\n      this.finishCurrentHex();\n    });\n  }\n\n  render() {\n    const { height, width, state } = this;\n    const { iso3 } = this.state;\n    return (\n      <ModelContext.Consumer>\n        {(model) => {\n          this.model = model;\n\n          return (\n            <>\n              <Box direction=\"row\" gap=\"medium\" margin=\"large\">\n                <Text>Country {state.render || ''}</Text>\n                <TextInput name='country' value={iso3 || ''} onChange={this.changeCountry}/>\n                <Button label=\"Analyze\" primary onClick={this.beginWorkOnCurrentCountry}/>\n                <Button label=\"Next\" primary onClick={this.nextCountry}/>\n              </Box>\n              <Box fill style={{ position: 'relative', width: `${width}px`, height: `${height}px` }}>\n                <Stack guidingChild={1} interctiveChild={1}>\n                  <Box fill>\n                    <div\n                      id=\"map-image\" style={{\n                      width: `${width}px`, height: `${height}px`,\n                      border: '1px solid red',\n                    }}/>\n                  </Box>\n\n                  <Box>\n                    <div\n                      id=\"hexes\"\n                      ref={this.myRef}\n                      style={{\n                        width,\n                        height,\n                        overflow: 'hidden',\n                        pointerEvents: 'none',\n                      }}\n                    />\n                  </Box>\n                </Stack>\n              </Box>\n            </>\n          );\n        }}\n      </ModelContext.Consumer>\n    );\n  }\n}\n\nexport default CountryMap;\n","/Users/davidedelhart/Documents/repos/workworkwork-next/src/components/DataScale.jsx",[],[],"/Users/davidedelhart/Documents/repos/workworkwork-next/src/components/DelayedDataTable.jsx",["197"],[],"import { Box, DataTable, Paragraph, Spinner } from 'grommet';\n\nexport const DelayedDataTable = ({ data, cols, tableParams = {} }) => (\n  data ?\n    <DataTable fill sort columns={cols} data={data} {...tableParams}  />\n : <>\n    <Spinner/>\n    <Paragraph\n      size=\"small\">Loading...</Paragraph>\n  </>\n);\n\nexport default DelayedDataTable;\n","/Users/davidedelhart/Documents/repos/workworkwork-next/src/components/DeleteButton.js",[],[],"/Users/davidedelhart/Documents/repos/workworkwork-next/src/components/EditButton.jsx",[],[],"/Users/davidedelhart/Documents/repos/workworkwork-next/src/components/EditTask.jsx",["198","199"],[],"import { Box, Button, Form, FormField, Heading, Select, TextArea } from 'grommet';\nimport { Add, Close } from 'grommet-icons';\nimport React, { useContext, useEffect, useMemo, useState } from 'react';\nimport ModelContext from './ModelContext';\nimport FormCloseButton from './FormCloseButton';\nimport OptionBox from './OptionBox';\nimport SaveButton from \"./SaveButton\";\n\nconst EditTask = ({ id, update }) => {\n  const model = useContext(ModelContext);\n  const table = model.base.table('tasks');\n  const [taskTypes, setTaskTypes] = useState([]);\n  const [task, setTask] = useState(table.createData({}));\n  const [validation, setValidation] = useState({ valid: false });\n\n  useEffect(() => {\n    if (id) {\n      model.getTask(id)\n        .then((record) => {\n          console.log('retrieved record for id', record);\n          if (!record) {\n            return update(false);\n          }\n          console.log('record is ', record);\n          const t2 = model.base.table('task_types');\n          return setTask(t2.createData(record.data));\n        });\n    }\n\n    const sub = model.base.stream({ tableName: 'task_types' }, (records) => {\n      setTaskTypes(records.map(r => r.data));\n    });\n    model.pollTaskTypes();\n    return () => {\n      sub.unsubscribe();\n    };\n  }, [model, id]);\n\n  return (<Box pad=\"large\" fill>\n      <Box direction=\"row\" align=\"between\">\n        <Heading level={2}>Create a new Task</Heading>\n        <FormCloseButton onClick={() => update(false)}/>\n      </Box>\n\n      <Form\n        style={{ minWidth: '80vw', minHeight: '80vh' }}\n        value={task}\n        onValidate={setValidation}\n        validate=\"change\"\n        onChange={setTask}\n        onSubmit={({ value }) => {\n          model.saveTask(value, id)\n            .then(() => update(true));\n        }}\n      >\n        <FormField name=\"task_type_id\" htmlFor=\"task_type-input-id\" label=\"Type\">\n          <Select\n            id=\"task_type-input-id\"\n            options={taskTypes}\n            labelKey=\"name\"\n            valueKey={{ key: 'id', reduce: true }}\n            name=\"task_type_id\">{(option, _, __, { selected }) => (<OptionBox selected={selected} label={option.name} /> )}</Select>\n        </FormField>\n        <FormField name=\"notes\" htmlFor=\"notes-input-id\" label=\"Notes\">\n          <TextArea id=\"notes-input-id\" name=\"notes\"/>\n        </FormField>\n        <Box direction=\"row\" gap=\"medium\">\n          <SaveButton id={id} valid={validation.valid} />\n        </Box>\n      </Form>\n    </Box>\n  );\n};\n\nexport default EditTask;\n","/Users/davidedelhart/Documents/repos/workworkwork-next/src/components/EditTaskType.jsx",["200","201","202","203","204"],[],"import {\n  Box,\n  Button,\n  Form,\n  FormField,\n  Heading, Select, Text,\n  TextArea,\n  TextInput,\n} from 'grommet';\nimport { Add, Close, Save } from 'grommet-icons';\nimport React, { useContext, useEffect, useMemo, useState } from 'react';\nimport ModelContext from './ModelContext';\nimport OptionBox from './OptionBox';\nimport SaveButton from './SaveButton';\n\nconst NONE = {\n  id: 0,\n  name: '(no parent)',\n};\n\nconst EditTaskType = ({ update, id, parent_id = null }) => {\n  const model = useContext(ModelContext);\n  const table = model.base.table('task_types');\n\n  const [validation, setValidation] = useState({ valid: false });\n  const [taskType, setTaskType] = useState(table.createData({ parent_id, unit: 'seconds' }));\n  const [taskTypes, setTaskTypes] = useState([]);\n\n  // create a \"temp\" record - even if updating, clone the data temporarily\n  useEffect(() => {\n    if (id) {\n      model.getTaskType(id)\n        .then((record) => {\n          if (!record) {\n            return update(false);\n          }\n          console.log('record is ', record);\n          const t2 = model.base.table('task_types');\n          return setTaskType(t2.createData({ ...record.data, unit: 'seconds' }));\n        });\n    }\n\n    const sub = model.base.stream({ tableName: 'task_types' }, (records) => {\n      setTaskTypes(records.map(r => r.data));\n    });\n    model.pollTaskTypes();\n    return () => {\n      sub.unsubscribe();\n    };\n  }, [model, id]);\n\n  const parentOptions = useMemo(() => [\n    NONE,\n    ...taskTypes,\n  ].filter((item) => !!item), [taskTypes]);\n\n  if (!(parentOptions && taskType)) {\n    return '';\n  }\n  return (\n    <Box pad=\"large\" fill overflow=\"scroll\">\n      <Heading level={2}>{id ? 'Edit Task Type' : 'Create a new TaskType'}\n        <div style={{ float: 'right' }}>\n          <Button plain icon={<Close/>} onClick={() => update(false)}/>\n        </div>\n      </Heading>\n      <Form\n        style={{ minWidth: '80vw', minHeight: '80vh' }}\n        value={taskType}\n        onValidate={setValidation}\n        onChange={setTaskType}\n        validate=\"change\"\n        onSubmit={({ value }) => {\n          // eslint-disable-next-line no-param-reassign\n          let { interval, unit } = value;\n          interval = Number.parseInt(value.interval, 10);\n          switch(unit) {\n            case 'minutes':\n              // eslint-disable-next-line no-param-reassign\n              interval *= 60;\n              break;\n            case 'hours':\n              // eslint-disable-next-line no-param-reassign\n              interval *= (60 ** 2);\n              break;\n          }\n          // eslint-disable-next-line no-param-reassign\n          delete value.unit;\n\n          model.saveTaskType({ ...value, interval }, id)\n            .then(() => update(true));\n        }}\n      >\n        <FormField\n          validate={(name) => (!id) && name && model.hasTaskType(name) ? {\n            property: 'name',\n            message: 'Name must be unique.',\n            status: 'error',\n          } : false}\n          name=\"name\" htmlFor=\"name-input-id\" label=\"Name\">\n          <TextInput id=\"name-input-id\" name=\"name\"/>\n        </FormField>\n        {parentOptions.length > 1 ?  <FormField label=\"Parent\" name=\"parent_id\" htmlFor=\"parent-id-input\" >\n          <Select\n            id=\"parent-id-input\"\n            name=\"parent_id\"\n            labelKey=\"name\"\n            value={taskType.parent_id || 0}\n            valueKey={{ key: 'id', reduce: true }}\n\n            onChange={({ value }) => {\n              setTaskType({ ...taskType, parent_id: value });\n            }}\n            options={parentOptions}\n          >{(option, _, __, { selected }) => (<OptionBox selected={selected} label={option.name} /> )}</Select>\n        </FormField> : ''}\n        <Box direction=\"row\" fill=\"horizontal\" gap=\"medium\" align=\"stretch\">\n          <Box width=\"50%\">\n            <FormField name=\"interval\" htmlFor=\"interval-input-id\" label=\"Interval\">\n              <TextArea type=\"number\" id=\"interval-input-id\" name=\"interval\"/>\n            </FormField>\n          </Box>\n          <Box width=\"50%\">\n            <FormField name=\"unit\" htmlFor=\"interval-units-input-id\" label=\"Unit\">\n              <Select defaultValue=\"seconds\" name=\"unit\" options={['seconds', 'minutes', 'hours']} id=\"interval-units-input-id\"  />\n            </FormField>\n          </Box>\n        </Box>\n        <FormField name=\"notes\" htmlFor=\"notes-input-id\" label=\"Notes\">\n          <TextArea id=\"notes-input-id\" name=\"notes\"/>\n        </FormField>\n        <Box direction=\"row\" gap=\"medium\">\n          <SaveButton id={id} valid={validation.valid} />\n        </Box>\n      </Form>\n    </Box>\n  );\n};\n\nexport default EditTaskType;\n","/Users/davidedelhart/Documents/repos/workworkwork-next/src/components/FormCloseButton.jsx",[],[],"/Users/davidedelhart/Documents/repos/workworkwork-next/src/components/FormLabel.js",[],[],"/Users/davidedelhart/Documents/repos/workworkwork-next/src/components/Hex.js",[],[],"/Users/davidedelhart/Documents/repos/workworkwork-next/src/components/Iso3Label.jsx",["205"],[],"import React, { useContext } from 'react';\nimport { Button, Text } from 'grommet';\n\nconst T = ({ children }) => (<Text style={{ whiteSpace: 'nowrap' }}>{children}</Text>);\nexport const IsoCountContext = React.createContext(null);\nexport const Iso3Label = ({ iso3, onClick }) => {\n  const count = useContext(IsoCountContext);\n  if (!iso3 || iso3 === 'null') return <Text>(none)</Text>;\n  if (count && count.get(iso3) > 1) {\n    return <Button onClick={onClick} size=\"small\" color=\"grid-button\" primary label={<T>{`${iso3} (${count.get(iso3)})`} </T>}/>;\n  }\n  return <T>{iso3} {count.get(iso3)}</T>;\n};\n","/Users/davidedelhart/Documents/repos/workworkwork-next/src/components/JsonNode.jsx",["206"],[],"import { Box, Text } from 'grommet';\n\n\nexport default ({ data, skipIfEmpty = true, expand = true, ifEmpty = '', size = 'small' }) => {\n  if (!data && skipIfEmpty) {\n    return ifEmpty;\n  }\n  try {\n    if (!expand) {\n      const dataString = JSON.stringify(data);\n      return (\n        <Box fill=\"horizontal\" overflow=\"auto\">\n        <Text as=\"pre\" size={size} truncate>\n          {dataString}\n        </Text>\n      </Box>\n      );\n    }\n\n    const dataString = JSON.stringify(data, true, 2);\n    return (\n      <Box fill=\"horizontal\" overflow=\"auto\">\n        <Text size={size}>\n          <pre>\n            {dataString}\n          </pre>\n        </Text>\n      </Box>\n    );\n  } catch (err) {\n    return skipIfEmpty ? ifEmpty : <Box fill=\"horizontal\">{ifEmpty}</Box>;\n  }\n\n};\n","/Users/davidedelhart/Documents/repos/workworkwork-next/src/components/LabelValue.js",["207"],[],"import React, { useContext, useMemo, useState } from 'react';\nimport { Box, Grid, ResponsiveContext, Text, TextInput } from 'grommet';\nimport PropTypes from 'prop-types';\nimport FormLabel from './FormLabel';\nimport { LV_GRID_L, LV_GRID_S } from './ux-constants';\n\nconst LabelValue = ({ label, children }) => {\n  const size = useContext(ResponsiveContext);\n  const LV = size === 'small' ? LV_GRID_S : LV_GRID_L;\n\n  let info = children;\n  if (Array.isArray(children)\n    && children.length === 1) {\n    // eslint-disable-next-line prefer-destructuring\n    info = children[0];\n  }\n\n  return (\n    <Grid {...LV}>\n      <Box gridArea=\"label\">\n        <FormLabel>{label}</FormLabel>\n      </Box>\n      <Box gridArea=\"info\">\n        {['string', 'number'].includes(typeof(info))  ? <Text>{info}</Text> : info}\n      </Box>\n    </Grid>\n  );\n};\n\nLabelValue.propTypes = {\n  label: PropTypes.oneOfType([PropTypes.string,  PropTypes.element]).isRequired,\n  children:  PropTypes.oneOfType([PropTypes.string, PropTypes.number,PropTypes.element]).isRequired,\n};\n\nexport default LabelValue;\n","/Users/davidedelhart/Documents/repos/workworkwork-next/src/components/LocationMap.jsx",[],[],"/Users/davidedelhart/Documents/repos/workworkwork-next/src/components/ModelContext.jsx",[],[],"/Users/davidedelhart/Documents/repos/workworkwork-next/src/components/OptionBox.jsx",[],[],"/Users/davidedelhart/Documents/repos/workworkwork-next/src/components/ParentButton.jsx",[],[],"/Users/davidedelhart/Documents/repos/workworkwork-next/src/components/SaveButton.jsx",[],[],"/Users/davidedelhart/Documents/repos/workworkwork-next/src/components/TaskEvents.jsx",[],[],"/Users/davidedelhart/Documents/repos/workworkwork-next/src/components/TaskNodes.js",["208","209","210"],[],"import React, { useContext, useEffect, useMemo, useState } from 'react';\nimport dayjs from 'dayjs';\nimport sortBy from 'lodash.sortby';\nimport { Box, Button, Grid, Heading, Text } from 'grommet';\nimport { FormDown, FormUp, Refresh } from 'grommet-icons';\nimport { constants } from '@wonderlandlabs/carpenter';\nimport NotificationBadge , { Effect } from 'react-notification-badge';\nimport ModelContext from './ModelContext';\nimport TaskEvents from './TaskEvents';\nimport JsonNode from './JsonNode';\n\nconst { binaryOperator } = constants;\n\nconst GRID_DEF = {\n  rows: ['auto', 'auto'],\n  columns: ['20rem', 'auto'],\n  areas: [\n    {\n      name: 'title',\n      start: [0, 0],\n      end: [0, 0],\n    },\n    {\n      name: 'data',\n      start: [0, 1],\n      end: [0, 1],\n    },\n    {\n      name: 'children',\n      start: [1, 0],\n      end: [1, 1],\n    },\n  ],\n};\n\nconst Node = ({ child }) => {\n  const model = useContext(ModelContext);\n  const { task_type_id } = child;\n  const type = model.base.table('task_types').getData(task_type_id);\n  const [showData, setShow] = useState(false);\n\n  const toggleShow = useMemo(() => () => {setShow(!showData);}, [showData]);\n  const count = useMemo(() => model.taskChildrenCount(child.id), [child]);\n\n  return <Box margin=\"small\">\n    <Grid {...GRID_DEF}>\n      <Box gridArea=\"title\">\n        <Box direction=\"row\" align=\"center\" gap=\"medium\" fill=\"horizontal\">\n\n          <Button icon={showData ? <FormUp /> : <FormDown />} onClick={toggleShow} />\n\n            <Heading level={3} style={{ whiteSpace: 'nowrap' }}> {type ? type.name : '?'}\n            </Heading>\n          {count ?  <NotificationBadge count={count}effect={Effect.SCALE} /> : ''}\n\n          <Text size=\"small\">{child.status}</Text>\n        </Box>\n        <Text size=\"xsmall\">{child.id}</Text>\n      </Box>\n      <Box gridArea=\"data\" overflow=\"auto\" >\n        {\n          showData ? <Box direction=\"column\" gap=\"small\">\n            <JsonNode data={child.data} />\n              {child.task_events.length ? (<>\n                <Heading level={3}>Events</Heading>\n                <TaskEvents task={child} />\n              </>) : ''}\n            <Button icon={<Refresh />} onClick={() => model.repeatTask(child.id)} label=\"Repeat\" />\n        </Box> : ''\n        }\n      </Box>\n      <Box\ngridArea=\"children\" overflow=\"hidden\">\n        <NodeSet root={child.id} />\n      </Box>\n    </Grid>\n  </Box>;\n};\n\nexport const NodeSet = ({ root }) => {\n  const model = useContext(ModelContext);\n\n  const tasks = model.taskChildrenFor(root).map((r) => r.data);\n  console.log('task children for', root, ':', tasks);\n\n  const children = sortBy(tasks.map((child) => ({ ...child, createdTime: dayjs(child.createdAt).unix() }))\n    , 'createdTime').reverse();\n\n\n  return children.map((child) => <Node key={child.id} child={child}/>);\n\n};\n","/Users/davidedelhart/Documents/repos/workworkwork-next/src/components/TicketCell.jsx",["211"],[],"import React, { useContext, useMemo } from \"react\";\nimport { Box, ResponsiveContext } from \"grommet\";\nimport { getCell, getTaskTypeGrid } from \"./ux-constants\";\nimport LabelValue from \"./LabelValue\";\nimport * as PropTypes from \"prop-types\";\n\nexport function TicketCell({ name, item, children}) {\n  const size = useContext(ResponsiveContext);\n  const CELL = useMemo(() => getCell(size), [size]);\n  return <Box\n    gridArea={name}\n    {...CELL}>\n    <LabelValue label={name}>\n      {React.Children.toArray(children).length? children: item[name]}\n    </LabelValue>\n  </Box>;\n}\n\nTicketCell.propTypes = { name: PropTypes.string };\n","/Users/davidedelhart/Documents/repos/workworkwork-next/src/components/TitleBar.jsx",[],[],"/Users/davidedelhart/Documents/repos/workworkwork-next/src/components/model.js",["212","213"],[],"import { createBase, constants } from '@wonderlandlabs/carpenter';\nimport axios from 'axios';\nimport { create, enums } from '@wonderlandlabs/collect';\nimport { geoToH3, getRes0Indexes, h3ToChildren } from 'h3-js';\nimport dayjs from 'dayjs';\nimport Color from 'colorjs.io';\n\nconst { TypeEnum } = enums;\nconst { binaryOperator, joinFreq } = constants;\nconst PIVOT_DATE_FORMAT = 'DD/MM/YYYY';\n\nexport const BLACK = new Color('p3', [0.05, 0, 0.01]);\nconst THOUSANDCOLOR = new Color('p3', [0, 0, 0.25])\nconst TENTHOUSANDCOLOR = new Color('p3', [0, 0.333, 0.2])\nconst HUNDREDTHOUSANDCOLOR = new Color('p3', [0.5, 0.5, 0]);\nconst BILLIONCOLOR = new Color('p3', [0.75, 0.125, 0.125]);\nconst TENBILLIONCOLOR = new Color('p3', [0.8, 0.8, 1]);\nconst WHITE = new Color('p3', [1, 1, 1]);\nconst SPACE = { outputSpace: 'srgb' };\n\nconst range1000 = BLACK.range(THOUSANDCOLOR, SPACE);\nconst range10k = THOUSANDCOLOR.range(TENTHOUSANDCOLOR, SPACE);\nconst range100k = TENTHOUSANDCOLOR.range(HUNDREDTHOUSANDCOLOR, SPACE);\nconst range1b = HUNDREDTHOUSANDCOLOR.range(BILLIONCOLOR, SPACE);\nconst range10b = BILLIONCOLOR.range(TENBILLIONCOLOR, SPACE);\n\nclass FieldSummary {\n  constructor(table1, info) {\n    const { iso3, data, date, field, st, offset } = info;\n    this.iso3 = iso3;\n    this.date = dayjs(date, PIVOT_DATE_FORMAT);\n    this.st = dayjs(st, PIVOT_DATE_FORMAT);\n    this.data = data;\n    this.field = field;\n    this.offset = offset;\n  }\n}\n\nconst colors = create(new Map(\n  [[11, \"rgb(6.2553% 0% 17.313%)\"],\n    [12, \"rgb(5.8438% 0% 18.589%)\"],\n    [13, \"rgb(5.2941% 0% 19.877%)\"],\n    [14, \"rgb(4.5689% 0% 21.179%)\"],\n    [15, \"rgb(3.6096% 0% 22.493%)\"],\n    [16, \"rgb(2.4614% 0% 23.82%)\"],\n    [17, \"rgb(1.1477% 0% 25.159%)\"],\n    [18, \"rgb(0.0002% 0.0039% 26.214%)\"],\n    [19, \"rgb(0.0009% 0.0219% 26.213%)\"],\n    [20, \"rgb(0.0017% 0.0399% 26.211%)\"],\n    [110, \"rgb(0.068% 1.6612% 26.065%)\"],\n    [120, \"rgb(0.0753% 1.8413% 26.049%)\"],\n    [130, \"rgb(0.0826% 2.0215% 26.032%)\"],\n    [140, \"rgb(0.09% 2.2016% 26.016%)\"],\n    [150, \"rgb(0.0979% 2.3815% 26%)\"],\n    [160, \"rgb(0.1065% 2.5612% 25.983%)\"],\n    [170, \"rgb(0.1157% 2.7408% 25.967%)\"],\n    [180, \"rgb(0.1257% 2.9201% 25.951%)\"],\n    [190, \"rgb(0.1363% 3.0992% 25.934%)\"],\n    [200, \"rgb(0.1475% 3.278% 25.918%)\"],\n    [1100, \"rgb(1.9544% 13.446% 24.382%)\"],\n    [1200, \"rgb(1.8364% 14.417% 24.191%)\"],\n    [1300, \"rgb(1.6165% 15.387% 23.993%)\"],\n    [1400, \"rgb(1.2905% 16.359% 23.789%)\"],\n    [1500, \"rgb(0.8543% 17.333% 23.579%)\"],\n    [1600, \"rgb(0.3036% 18.309% 23.362%)\"],\n    [1700, \"rgb(0% 19.287% 23.137%)\"],\n    [1800, \"rgb(0% 20.268% 22.905%)\"],\n    [1900, \"rgb(0% 21.252% 22.665%)\"],\n    [2000, \"rgb(0% 22.238% 22.417%)\"],\n    [11000, \"rgb(12.857% 38.588% 12.38%)\"],\n    [12000, \"rgb(15.552% 39.166% 11.368%)\"],\n    [13000, \"rgb(17.954% 39.741% 10.273%)\"],\n    [14000, \"rgb(20.162% 40.313% 9.0723%)\"],\n    [15000, \"rgb(22.231% 40.884% 7.7268%)\"],\n    [16000, \"rgb(24.197% 41.451% 6.1708%)\"],\n    [17000, \"rgb(26.083% 42.016% 4.2697%)\"],\n    [18000, \"rgb(27.907% 42.579% 2.0199%)\"],\n    [19000, \"rgb(29.679% 43.139% 0%)\"],\n    [20000, \"rgb(31.41% 43.697% 0%)\"],\n    [110000, \"rgb(59.684% 43.058% 0%)\"],\n    [120000, \"rgb(60.828% 42.074% 0%)\"],\n    [130000, \"rgb(61.971% 41.052% 0%)\"],\n    [140000, \"rgb(63.119% 39.984% 0%)\"],\n    [150000, \"rgb(64.276% 38.864% 0%)\"],\n    [160000, \"rgb(65.445% 37.684% 0%)\"],\n    [170000, \"rgb(66.629% 36.433% 0%)\"],\n    [180000, \"rgb(67.835% 35.099% 0%)\"],\n    [190000, \"rgb(69.065% 33.666% 0%)\"],\n    [200000, \"rgb(70.328% 32.111% 0%)\"],\n    [1100000, \"rgb(83.467% 13.29% 13.426%)\"],\n    [1200000, \"rgb(83.651% 14.779% 14.368%)\"],\n    [1300000, \"rgb(83.832% 16.153% 15.303%)\"],\n    [1400000, \"rgb(84.009% 17.439% 16.233%)\"],\n    [1500000, \"rgb(84.182% 18.653% 17.159%)\"],\n    [1600000, \"rgb(84.353% 19.807% 18.082%)\"],\n    [1700000, \"rgb(84.519% 20.912% 19.003%)\"],\n    [1800000, \"rgb(84.682% 21.975% 19.922%)\"],\n    [1900000, \"rgb(84.842% 23.001% 20.841%)\"],\n    [2000000, \"rgb(84.998% 23.995% 21.759%)\"],\n    [11000000, \"white\"],\n  ]\n));\n\nconst makeModel = () => createBase([\n  {\n    name: 'task_types',\n    key: 'id',\n  },\n  {\n    name: 'tasks', data: [], key: 'id',\n  },\n  {\n    name: 'locations',\n    key: 'uid',\n    dataCreator: (table, location) => {\n      if (!(create(location.latitude).type === TypeEnum.number && create(location.longitude).type === TypeEnum.number)) {\n        location.hindex = null;\n      } else {\n        location.hindex = geoToH3(location.latitude, location.longitude, 2);\n      }\n\n      return location;\n    },\n  },\n  {\n    name: 'tasks-info', key: 'id',\n  },\n  {\n    name: 'geojson',\n  },\n  {\n    name: 'pivots', dataCreator(table, info) {\n      return new FieldSummary('table', info);\n    },\n    keyProvider: (record) => {\n      return `${record.iso3}-${record.field}`\n    }\n  },\n  {\n    name: 'hexes', key: 'hindex', dataCreator: (table, input) => ({\n      ...input,\n      countryShares: new Map(),\n    }),\n  },\n  { name: 'countries', key: 'iso3' },\n], {\n  joins: [\n    {\n      from: {\n        tableName: 'hexes',\n        frequency: joinFreq.noneOrOne,\n      },\n      to: {\n        tableName: 'locations',\n        key: 'hindex',\n        frequency: joinFreq.noneOrMore,\n      },\n      name: 'locHexes',\n    },\n  ],\n});\n\nconst API_ROOT = 'https://54.149.3.112' // : 'http://localhost:3000';\n\nexport default () => {\n  const base = makeModel();\n  const hexTable = base.table('hexes');\n  hexTable.data.forEach((hex) => {\n    const childIndexes = h3ToChildren(hex.hindex, 2);\n    childIndexes.forEach(hindex => {\n      hexTable.add({ hindex, level: 2 });\n    });\n  });\n\n  const TASK_TYPE_ROOT = `${API_ROOT}/task-types`;\n  const TASK_ROOT = `${API_ROOT}/tasks`;\n\n  const hexesUrl = (...args) => [API_ROOT, 'hexes', ...args].join('/');\n  const taskTypeUrl = (...args) => [TASK_TYPE_ROOT, ...args].join('/');\n  const taskUrl = (...args) => [TASK_ROOT, ...args].join('/');\n  const countryUrl = (...args) => [API_ROOT, 'countries', ...args].join('/');\n  const pivotUrl = (...args) => [API_ROOT, 'pivot-summary/summary', ...args].join('/');\n\n  const ranges = [\n    { max: 10 ** 1.25, range: range1000 },\n    { max: 10 ** 3.5, range: range10k },\n    { max: 10 ** 4.5, range: range100k },\n    { max: 10 ** 5.5, range: range1b },\n    { max: 10 ** 7, range: range10b },\n  ]\n\n  const model = {\n    apiRoot: API_ROOT,\n    newTypeId: null,\n    newTaskTypeKey: null,\n    ttChildrenFor(id) {\n      return base.query({\n        tableName: 'task_types',\n        where: {\n          field: 'parent_id',\n          test: binaryOperator.eq,\n          against: id,\n        },\n      });\n    },\n\n    valueColor(n) {\n      return colors.reduce((memo, color, index, _c, stopper) => {\n        if (index < n) {\n          return color;\n        }\n        stopper.stopAfterThis();\n        return memo;\n      }, 'black');\n    },\n\n    valueToColor(n) {\n      for (let index = 0; index < ranges.length; ++index) {\n        let { max, range } = ranges[index]\n        if (n <= max) {\n          let min = index ? ranges[index - 1].max : 0;\n          const color = range((n - min) / (max - min));\n\n          return color;\n        }\n      }\n      return WHITE\n    },\n\n    valueColorSet() {\n      let map = new Map();\n      for (let po10 = 1; po10 < 10; ++po10) {\n        const base = 10 ** po10;\n        for (let i = 1; i <= 10; i += 1) {\n          const num = base + (base * (i / 10));\n          map.set(num, model.valueToColor(num).toString({ format: 'rgb' }));\n        }\n      }\n      return map;\n    },\n\n    sendCurrentHexShare(iso3, hindex, share, max) {\n      if (share) {\n        axios.patch(hexesUrl(hindex), {\n          iso3,\n          strength: share / max,\n        });\n      }\n    },\n\n    nearBounds(center, bounds) {\n      const west = bounds[0].ln - 2;\n      const east = bounds[1].ln + 2;\n      const south = bounds[1].lt - 2;\n      const north = bounds[0].lt + 2;\n      const { lt, ln } = center;\n      const match = ln >= west && ln <= east && lt >= south && lt <= north;\n      return match;\n    },\n\n    hexStrength(hex, iso3) {\n      const hexBase = hex.data.countryShares.get('_BASE_') || 1;\n      const share = hex.data.countryShares.get(iso3) || 0;\n\n      if (hexBase <= 0 || share <= 0) {\n        return 0;\n      }\n      return share / hexBase;\n    },\n\n    findHexesAround(countryData) {\n      return base.table('hexes').query({\n        tableName: 'hexes',\n        where: (record) => {\n          if (record.data.level !== 3) {\n            return false;\n          }\n          return this.nearBounds({ ln: record.data.longitude, lt: record.data.latitude }, countryData.boundary);\n        },\n      });\n    },\n\n    getField(field) {\n      return axios.get(pivotUrl(field))\n        .then((result) => {\n          const records = result.data.map(p => {\n            return { ...p, field };\n          });\n          base.table('pivots').addMany(records);\n          return base.table('pivots').query({\n            tableName: 'pivots',\n            where: {\n              field: 'field',\n              test: binaryOperator.eq,\n              against: field\n            }\n          })\n        });\n    },\n\n    taskChildrenCount(id) {\n      const children = this.taskChildrenFor(id);\n      return children.reduce((count, child) => count + 1 + this.taskChildrenCount(child.key), 0);\n    },\n\n    taskChildrenFor(id) {\n      return base.query({\n        tableName: 'tasks',\n        where: {\n          field: 'parent_task_id',\n          test: binaryOperator.eq,\n          against: id,\n        },\n      });\n    },\n    promoteTaskType(id) {\n      return axios.put(taskTypeUrl(id, 'promote'))\n        .then(() => model.pollTaskTypes());\n    },\n    demoteTaskType(id) {\n      return axios.put(`${TASK_TYPE_ROOT}/${id}/demote`)\n        .then(() => model.pollTaskTypes());\n    },\n    hasTaskType(name) {\n      if (!(name && typeof name === 'string')) {\n        return false;\n      }\n      const target = name.toLowerCase();\n      return !!(base.table('task_types').data.items\n        .find((data) => data.name.toLowerCase() === target));\n    },\n    deleteTaskType: (id) => axios.delete(taskTypeUrl(id))\n      .then(() => model.pollTaskTypes()),\n    saveTaskType(data, id) {\n      const url = id ? taskTypeUrl(id) : taskTypeUrl();\n      return (id ? axios.patch(url, data) : axios.post(url, data))\n        .then(() => model.pollTaskTypes());\n    },\n    getTaskType: (id) => axios.get(taskTypeUrl(id))\n      .then((response) => {\n        const { data } = response;\n        if (data && !data.deleted) {\n          return base.table('task_types').add(data);\n        }\n        return false;\n      }),\n    pollTaskTypes: () => axios.get(TASK_TYPE_ROOT)\n      .then((response) => {\n\n        base.table('task_types').addMany(response.data);\n      }),\n    pollHexes: () => axios.get(hexesUrl('level', 3))\n      .then((response) => {\n\n        base.table('hexes').addMany(response.data);\n      }),\n    // -------- TASKS\n    pollTasks: () => axios.get(`${model.apiRoot}/tasks`)\n      .then((response) => {\n        base.table('tasks').addMany(response.data);\n      }),\n    patchTask(data) {\n      if (!data.id) {\n        throw new Error('cannot patch data without id');\n      }\n\n      delete model.newTaskTypeKey;\n      return axios.patch(taskUrl(data.id), data)\n        .then(() => model.pollTasks());\n    },\n    repeatTask(id) {\n      axios.post(taskUrl(id))\n        .then(() => this.pollTasks());\n    },\n    saveTask(data, id) {\n      const url = id ? taskUrl(id) : taskUrl();\n      return (id ? axios.patch(url) : axios.post(url, data))\n        .then(() => model.pollTasks());\n    },\n    base,\n    pollLocations() {\n      return axios.get(`${model.apiRoot}/locations`)\n        .then((response) => {\n          base.table('locations').addMany(response.data);\n        });\n    },\n    pollCountries() {\n      return axios.get(`${model.apiRoot}/countries`)\n        .then((response) => {\n          base.table('countries').addMany(response.data);\n        });\n    },\n    getGeoJson() {\n      return axios.get(countryUrl('geojson'))\n        .then(({ data }) => {\n          base.table('geojson').addMany(data.features);\n          console.log('--- geojson saved:', base.table('geojson').data);\n          const q = base.table('geojson').query({ tableName: 'geojson' });\n          return q.map(({ data }) => data);\n        });\n    },\n  };\n\n  return model;\n};\n","/Users/davidedelhart/Documents/repos/workworkwork-next/src/components/ux-constants.js",[],[],"/Users/davidedelhart/Documents/repos/workworkwork-next/src/grommet-theme.js",["214"],[],"const baselineFontSizes = [\n  18, // text,\n  30, // l1,\n  24, // l2,\n  21, // l3,\n  18,\n];\n\nconst sizeScales = new Map([\n  ['small', 0.9],\n  ['medium', 1],\n  ['large', 1.2],\n  ['xlarge', 1.333],\n]);\n\nfunction fontSize(level, size) {\n  return {\n    size: `${baselineFontSizes[level] * sizeScales.get(size)}px`,\n    height: '125%',\n    maxWidth: '100%',\n  };\n}\n\nconst headingFonts = new Map([\n  [\n    1,\n    {\n      family:\n        '\"San Francisco Display Black\", \"Helvetica Neue\", \"Helvetica\", sans-serif',\n    },\n  ],\n]);\n\nconst theme = {\n  name: 'my theme',\n  rounding: 4,\n  spacing: 24,\n  defaultMode: 'light',\n  global: {\n    colors: {\n      stripe: {\n        dark: 'rgba(0,48,204,5%)',\n        light: 'rgba(18,83,220, 5%)',\n      },\n      brand: {\n        dark: '#0030cc',\n        light: '#1253dc',\n      },\n      link: {\n        dark: '#002291',\n        light: '#1c5eff',\n      },\n      'button-danger': {\n        dark: '#990000',\n        light: '#ff0000',\n      },\n      'ticket': {\n        dark: '#0f8000',\n        light: '#10a100',\n      },\n      'ticket-bg': {\n        dark: 'rgba(15,128,0,0.1)',\n        light: 'rgba(16,161,0,0.1)',\n      },\n      background: {\n        dark: '#111111',\n        light: '#FFFFFF',\n      },\n      'background-back': {\n        dark: '#111111',\n        light: '#EEEEEE',\n      },\n      'background-front': {\n        dark: '#222222',\n        light: '#FFFFFF',\n      },\n      'background-contrast': {\n        dark: '#FFFFFF11',\n        light: '#11111111',\n      },\n      text: {\n        dark: '#EEEEEE',\n        light: '#333333',\n      },\n      'text-strong': {\n        dark: '#FFFFFF',\n        light: '#000000',\n      },\n      'text-weak': {\n        dark: '#CCCCCC',\n        light: '#444444',\n      },\n      'text-xweak': {\n        dark: '#999999',\n        light: '#666666',\n      },\n      border: {\n        dark: '#444444',\n        light: '#CCCCCC',\n      },\n\n      control: 'brand',\n      'active-background': 'background-contrast',\n      'active-text': 'text-strong',\n      'selected-background': 'brand',\n      'selected-text': 'text-strong',\n      'status-critical': '#a82c2c',\n      'status-warning': '#FFAA15',\n      'status-ok': '#008658',\n      'status-unknown': '#CCCCCC',\n      'status-disabled': '#CCCCCC',\n      'graph-0': 'brand',\n      'graph-1': 'status-warning',\n      'section-head': '#44000c',\n    },\n    font: {\n      family: '\"San Francisco\" ,\"Helvetica Neue\", Helvetica, sans-serif',\n    },\n    active: {\n      background: 'active-background',\n      color: 'active-text',\n    },\n    hover: {\n      background: 'active-background',\n      color: 'active-text',\n    },\n    selected: {\n      background: 'selected-background',\n      color: 'selected-text',\n    },\n  },\n  chart: {},\n  diagram: {\n    line: {},\n  },\n  meter: {},\n  tip: {\n    content: {\n      background: {\n        color: 'background',\n      },\n      elevation: 'none',\n      round: false,\n    },\n  },\n  layer: {\n    background: {\n      dark: '#111111',\n      light: '#FFFFFF',\n    },\n  },\n  heading: {\n    font: {\n      family: 'San Francisco Display',\n      height: '120%',\n    },\n    level: [1, 2, 3, 4, 5].reduce((memo, level) => ({\n        ...memo,\n        [level]: {\n          font: headingFonts.has(level) ? headingFonts.get(level) : {},\n          small: fontSize(level, 'small'),\n          medium: fontSize(level, 'medium'),\n          large: fontSize(level, 'large'),\n          xlarge: fontSize(level, 'xlarge'),\n        },\n      }), {}),\n  },\n  paragraph: 'small,medium,large,xlarge'.split(',').reduce((memo, size) => ({ ...memo, [size]: fontSize(0, size) }), {}),\n  text: 'small,medium,large,xlarge'.split(',').reduce((memo, size) => ({ ...memo, [size]: fontSize(0, size) }), {}),\n  breakpoints: {\n    small: {\n      value: 768,\n      borderSize: {\n        xsmall: '1px',\n        small: '2px',\n        medium: '4px',\n        large: '6px',\n        xlarge: '12px',\n      },\n      edgeSize: {\n        none: '0px',\n        hair: '1px',\n        xxsmall: '2px',\n        xsmall: '3px',\n        small: '6px',\n        medium: '12px',\n        large: '24px',\n        xlarge: '48px',\n      },\n      size: {\n        xxsmall: '24px',\n        xsmall: '48px',\n        small: '96px',\n        medium: '192px',\n        large: '384px',\n        xlarge: '768px',\n        full: '100%',\n      },\n    },\n    medium: {\n      value: 1024,\n      size: {\n        xxsmall: '24px',\n        xsmall: '48px',\n        small: '96px',\n        medium: '192px',\n        large: '384px',\n        xlarge: '768px',\n        full: '100%',\n      },\n    },\n    large: {\n      value: 1200,\n      size: {\n        xxsmall: '24px',\n        xsmall: '48px',\n        small: '96px',\n        medium: '192px',\n        large: '384px',\n        xlarge: '768px',\n        full: '100%',\n      },\n    },\n    xlarge: {\n      value: 1536,\n    },\n  },\n  button: {\n    border: {\n      radius: '3px',\n      width: '1px',\n    },\n    size: {\n      small: {\n        border: {\n          radius: '0px',\n        },\n      },\n      medium: {\n        border: {\n          radius: '2px',\n        },\n      },\n    },\n  },\n};\n\nexport default theme;\n","/Users/davidedelhart/Documents/repos/workworkwork-next/src/pages/_app.jsx",["215"],[],"import '../../styles/globals.css';\nimport React from 'react';\nimport { Grommet, Page, Heading, PageContent, Nav } from 'grommet';\nimport { Home } from 'grommet-icons';\nimport Link from \"next/link\";\nimport theme from '../grommet-theme';\nimport ModelContext from \"../components/ModelContext\";\nimport createModel from '../components/model';\n\nexport default function MyApp({ Component, pageProps }) {\n  return (\n    <ModelContext.Provider value={createModel()}>\n      <Grommet theme={theme} full>\n        <Page kind=\"full\" margin=\"0\" id=\"page\" background=\"black\" height={\"100vh\"} overflow=\"auto\">\n          <PageContent margin=\"0\" pad=\"0\" id=\"page-content\">\n            <Nav background=\"brand\" size=\"small\" direction=\"row\" pad=\"small\" gap=\"large\">\n              <Link href=\"/\"><Home color=\"white\"/></Link>\n              <Heading size=\"small\" pad=\"0\" margin=\"0\">\n                COVID 19\n                Deaths </Heading>\n            </Nav>\n            <Component {...pageProps} />\n          </PageContent>\n        </Page>\n      </Grommet>\n    </ModelContext.Provider>\n  );\n}\n","/Users/davidedelhart/Documents/repos/workworkwork-next/src/pages/_document.js",["216","217"],[],"import Document, { Html, Head, Main, NextScript } from 'next/document';\nimport { ServerStyleSheet } from 'styled-components';\n// This custom set-up is necessary to inject the server side\n// rendered styles into the <head>\n// More info here: https://github.com/zeit/next.js/tree/master/examples/with-styled-components\n\nexport default class MyDocument extends Document {\n  static async getInitialProps(ctx) {\n    const sheet = new ServerStyleSheet();\n    const originalRenderPage = ctx.renderPage;\n\n    try {\n      ctx.renderPage = () =>\n        originalRenderPage({\n          enhanceApp: App => props => sheet.collectStyles(<App {...props} />),\n        });\n\n      const initialProps = await Document.getInitialProps(ctx);\n      return {\n        ...initialProps,\n        styles: (\n          <>\n            {initialProps.styles}\n            {sheet.getStyleElement()}\n          </>\n        ),\n      };\n    } finally {\n      sheet.seal();\n    }\n  }\n\n  render() {\n    return (\n      <Html lang=\"en\">\n        <Head>\n          <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\"/>\n          <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossOrigin=\"true\"/>\n          <link\n            href=\"https://fonts.googleapis.com/css2?family=Ubuntu:ital,wght@0,300;0,400;0,700;1,300;1,400;1,700&display=swap\"\n            rel=\"stylesheet\"/>\n        </Head>\n        <body>\n        <Main/>\n        <NextScript/>\n        </body>\n      </Html>\n    );\n  }\n}\n","/Users/davidedelhart/Documents/repos/workworkwork-next/src/pages/index.jsx",["218","219","220","221","222","223","224"],[],"import { useContext, useEffect, useMemo, useState } from 'react';\nimport { Box, Button, Layer, Select, Spinner, Text } from 'grommet';\nimport { Canvas, useThree } from '@react-three/fiber';\nimport ModelContext from '../components/ModelContext';\nimport { a, useSpring } from '@react-spring/three'\nimport * as THREE from 'three';\nimport { useDrag } from 'react-use-gesture';\nimport { Leaf } from '@wonderlandlabs/forest';\nimport dayjs from \"dayjs\";\nimport { BLACK } from \"../components/model\";\nimport { DataScale } from \"../components/DataScale\";\n\nconst isSameOrAfter = require('dayjs/plugin/isSameOrAfter');\ndayjs.extend(isSameOrAfter)\n\nconst CONTINENTS = ['all', 'Africa', 'Europe', 'Americas', 'Asia'];\n\nlet ThreeGlobe = null;\nif (typeof window !== 'undefined') {\n  ThreeGlobe = require('three-globe').default;\n}\n\nfunction Inspector({ responsiveness = 20, children }) {\n  const { size } = useThree()\n  const euler = useMemo(() => new THREE.Euler(), [])\n  const [spring, set] = useSpring(() => ({\n    rotation: [0, 0, 0],\n  }))\n  const bind = useDrag(({ delta: [dx, dy] }) => {\n    euler.y += (dx / size.width) * responsiveness\n    euler.x += (dy / size.width) * responsiveness\n    euler.x = THREE.MathUtils.clamp(euler.x, -Math.PI / 2, Math.PI / 2)\n    set({ rotation: euler.toArray().slice(0, 3) })\n  })\n  return (\n    <a.group {...bind()} {...spring}>\n      {children}\n    </a.group>\n  )\n}\n\nconst GlobeView = () => {\n  const model = useContext(ModelContext);\n  const leaf = useMemo(() => new Leaf(\n    {\n      geoJson: null,\n      time: 0,\n      continent: 'all',\n      animate: false,\n      animationInterval: 0.25,\n      globe: null,\n    },\n    {\n      selectors: {\n        currentDate({ time }) {\n          let date = dayjs(new Date(2020, 0, 1));\n          return date.add(time, 'd');\n        },\n        resolution({continent}) {\n          switch (continent) {\n            case 'Europe':\n              return 4;\n              break;\n\n            case 'Americas':\n              return 3;\n              break;\n\n            case 'Africa':\n              return 3;\n              break;\n\n            default:\n              return 2;\n          }\n        },\n        features({ geoJson, continent }) {\n          if (!geoJson) {\n            return null;\n          }\n          if (continent === 'all') {\n            return geoJson;\n          }\n          const some = geoJson.filter((f) => {\n            if (f.properties.WB_A3 === 'RUS') {\n              return continent === 'Asia'\n            }\n            if (continent === 'Americas') {\n              return f.properties.CONTINENT === 'North America' ||  f.properties.CONTINENT === 'South America'\n            }\n            if (continent === 'Asia') {\n              if (f.properties.CONTINENT === 'Oceania') return true;\n            }\n            return f.properties.CONTINENT === continent\n          });\n\n          return some;\n        },\n      },\n\n      actions: {\n        newContinent(leaf, continent) {\n          leaf.do.setContinent(continent);\n        },\n        colorFn (leaf, country) {\n          const {properties} = country;\n          const iso = properties.WB_A3;\n          const key = `${iso}-deaths`;\n          const pivot = model.base.table('pivots').getData(key);\n          if (!pivot) {\n            return BLACK.toString({format: 'srgb'});\n          }\n          const {offset, st, data} = pivot;\n\n          const currentTime = leaf.selector('currentDate');\n\n          const pivotStartTime = dayjs(st).add(offset, 'd');\n          const index = currentTime.diff(pivotStartTime, 'd');\n\n          if (index < 0) {\n            return BLACK.toString({format: 'srgb'});\n          }\n          if (index >= data.length) {\n            return model.valueColor(data[data.length - 1]);\n          }\n          const color = model.valueColor(data[index]);\n          console.log('coloring ', iso, color);\n          return color;\n      },\n        toggleAnimate(leaf) {\n          leaf.do.setAnimate(!leaf.value.animate);\n          leaf.do.setTime(0);\n          if (leaf.value.animate) {\n            leaf.do.next();\n          }\n        },\n        next(leaf) {\n          if (!leaf.value.animate) {\n            return;\n          }\n\n          const currentTime = leaf.selector('currentDate');\n          if (currentTime.isSameOrAfter(new Date())) {\n            return;\n          }\n          setTimeout(leaf.do.advanceTime, leaf.value.animationInterval);\n        },\n        advanceTime(leaf) {\n          leaf.do.setTime(leaf.value.time + 1);\n          leaf.do.next();\n        },\n        loadGeoJson(leaf) {\n          model.getGeoJson()\n            .then((data) => {\n              leaf.do.setGeoJson(data);\n            });\n        }\n      }\n    }\n  ), []);\n\n  useEffect(() => {\n    const sub = leaf.subscribe(setState);\n    leaf.do.loadGeoJson();\n    console.log('model colors: ', JSON.stringify([...model.valueColorSet().entries()]));\n    return () => sub.unsubscribe();\n  }, [leaf]);\n\n  useEffect(() => {\n    model.getField('deaths');\n  }, [])\n\n  const [state, setState] = useState(null);\n\n  const { geoJson, changing, continent = 'all', time, animate, $currentDate, $features , $resolution } = (state || {});\n\n  const globe = useMemo(() => {\n    if ((!ThreeGlobe) || (!leaf.selector('features'))) {\n      return null;\n    }\n    const globe = new ThreeGlobe({ animateIn: false })\n      .globeImageUrl('//unpkg.com/three-globe/example/img/earth-dark.jpg')\n      .hexPolygonsData(leaf.selector('features'))\n      .hexPolygonResolution($resolution)\n      .hexPolygonMargin(0.1)\n      .hexPolygonColor(leaf.do.colorFn);\n     return globe;\n  }, [continent, geoJson, ThreeGlobe, changing]);\n\n  useEffect(() => {\n    if (globe) {\n      globe.hexPolygonsData([...$features]);\n    }\n  }, [time, globe, continent])\n\n  if (!geoJson || !globe) {\n    return <Spinner size=\"large\"/>;\n  }\n\n  return <>\n    <div style={{ position: 'absolute', top: 0, left: 0, right: 0, bottom: 0 }}>\n      <Canvas>\n        <ambientLight color=\"#cddbfe\"/>\n        <directionalLight color=\"#cddbfe\"/>\n        <pointLight position={[10, 10, 10]}/>\n        {changing? null : (\n          <mesh position={[-20, -5, -180]}>\n            <Inspector>\n              <primitive object={globe}/>\n            </Inspector>\n          </mesh>\n        )}\n      </Canvas>\n    </div>\n    <Layer plain position=\"top-right\" modal={false} fill=\"horizontal\">\n      <Box style={{ zIndex: 10000 }} align=\"baseline\" pad=\"small\" direction=\"row-reverse\" gap=\"medium\"\n           fill=\"horizontal\">\n\n        <Box background=\"#FFF\">\n          <Select options={CONTINENTS} value={continent}\n                  valueLabel={(option) => (<Box pad=\"2px\" fill=\"horizontal\" background=\"#FFF\">\n                    <Text>{option}</Text>\n                  </Box>)}\n\n                  onChange={({ value }) => leaf.do.newContinent(value)}>\n            {(option) => (<Box pad=\"small\" fill=\"horizontal\" background=\"#FFF\"><Text>{option}</Text></Box>)}\n          </Select>\n        </Box>\n        <Box pad=\"small\">\n          <Text color=\"white\">Continent</Text>\n        </Box>\n        {\n          <Button color=\"black\" label={animate ? 'Stop' : 'Animate'} primary onClick={leaf.do.toggleAnimate}></Button>\n       }\n\n        {animate ? <Text>{$currentDate.format('MMM DD YYYY')} </Text> : ''}\n      </Box>\n    </Layer>\n    <Layer plain position=\"bottom-right\" modal={false}>\n      <DataScale/>\n    </Layer>\n  </>;\n};\n\nexport default GlobeView\n","/Users/davidedelhart/Documents/repos/workworkwork-next/src/pages/locations.jsx",["225","226","227"],[],"import React, { useContext, useEffect, useMemo } from 'react';\nimport { Box, Button, Heading, Layer, Spinner, Tab, Tabs, Text } from 'grommet';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport { create, enums } from '@wonderlandlabs/collect';\nimport { constants } from '@wonderlandlabs/carpenter';\nimport ModelContext from '../components/ModelContext';\nimport EditTask from '../components/EditTask';\nimport TitleBar from '../components/TitleBar';\nimport DelayedDataTable from '../components/DelayedDataTable';\nimport { Iso3Label, IsoCountContext as IsoCountContext1 } from '../components/Iso3Label';\nimport  LocationMap  from '../components/LocationMap';\nimport CountryMap from '../components/CountryMap';\n\nconst { FormEnum } = enums;\n\ndayjs.extend(relativeTime);\n\nfunction countFields(data, field) {\n  const map = create(new Map());\n  if (!Array.isArray(data)) {\n    return map;\n  }\n  return data.reduce((m, item) => {\n    const quality = create(item);\n    if (quality.form === FormEnum.scalar) {\n      return map;\n    }\n    const fieldValue = quality.get(field);\n\n    if (m.hasKey(fieldValue)) {\n      m.set(fieldValue, m.get(fieldValue) + 1);\n    } else {\n      m.set(fieldValue, 1);\n    }\n\n    return map;\n  }, map)\n    .filter((count) => count > 1);\n}\n\nconst Locations = () => {\n  const [show, setShow] = React.useState(false);\n  const [locations, setLocations] = React.useState(null);\n  const [hexes, setHexes] = React.useState(null);\n  const [countries, setCountries] = React.useState(null);\n  const [iso, setIso] = React.useState(null);\n  const model = useContext(ModelContext);\n\n  const LOC_COLS = [\n    {\n      property: 'iso3',\n      header: 'ISO',\n      render: (location) => (<Iso3Label onClick={() => setIso(location.iso3)} iso3={location.iso3}/>),\n    },\n    {\n      property: 'name',\n      header: 'Name',\n    },\n    {\n      property: 'latitude',\n      header: 'Lat',\n      size: 'small',\n    },\n    {\n      property: 'longitude',\n      header: 'Lon',\n      size: 'small',\n    },\n    {\n      property: 'population',\n      header: 'Pop',\n      size: 'small',\n    },\n    {\n      property: 'hex_shares', header: 'Hexes',\n      size: 'f', render: (data) => {\n        return data.hex_shares.length || 0;\n      },\n    },\n  ];\n\n  const COLS = useMemo(() => {\n    if (iso) {\n      return LOC_COLS.filter(c => c.property !== 'iso3');\n    }\n    return LOC_COLS;\n  }, [iso]);\n\n  useEffect(() => {\n    const sub = model.base.stream({\n      tableName: 'countries',\n    }, (records) => {\n      setLocations(records.map(r => r.data));\n    });\n\n    const hexSub =  model.base.stream({\n      tableName: 'hexes',\n    }, (records) => {\n      setHexes(records);\n    });\n\n    model.pollHexes();\n    model.pollCountries();\n\n    const countrySub = model.base.stream({\n      tableName: 'countries',\n    }, (records) => {\n      setCountries(records);\n    });\n\n    return () => {\n      sub.unsubscribe();\n      hexSub.unsubscribe();\n      countrySub.unsubscribe();\n    };\n  }, [model]);\n\n  const iso3Counts = useMemo(() => {\n    if (Array.isArray(locations)) {\n      return locations.reduce((memo, loc) => {\n        if (loc.iso3) {\n          memo.set(loc.iso3, 1 + (memo.has(loc.iso3) ? memo.get(loc.iso3) : 0));\n        }\n\n        return memo;\n      }, new Map());\n    }\n    return new Map();\n  }, [locations]);\n\n  const data = useMemo(() => iso ? locations.filter((l) => l.iso3 === iso) : locations, iso);\n\n  const subgroup = useMemo(() => {\n    if (!iso) {\n      return '';\n    }\n    const states = countFields(data, 'province_state');\n    if (states.size > 1) {\n      return 'province_state';\n    }\n    return null;\n  }, [iso, data]);\n\n  if (!hexes) {\n    return <Spinner size=\"large\" />;\n  }\n\n  return (\n    <IsoCountContext1.Provider value={iso3Counts}>\n      <Box pad=\"large\">\n        <TitleBar\n          label=\"Locations\"\n        />\n        <Tabs>\n          <Tab title=\"data\">\n            <Box margin={{ top: 'medium', bottom: 'medium' }}>\n              <Text size=\"small\">\n                <b>Subgroup</b>: {subgroup}, <b>iso</b>: {iso}\n              </Text>\n            </Box>\n            <Box align=\"start\" overflow=\"auto\">\n              {iso ? <Box fill=\"horizontal\" direction=\"row\" justify=\"between\">\n                <Heading level=\"3\">Viewing locations in iso &quot;{iso}&quot;</Heading>\n                <Button label=\"View All ISOs\" onClick={() => setIso(null)}/>\n              </Box> : null}\n              <DelayedDataTable\n                data={data}\n                cols={COLS}\n                count={iso3Counts}\n                tableParams={{\n                  groupBy: iso ? subgroup : 'iso3',\n                  pin: true,\n                  step: 200,\n                  sort: { direction: 'asc', property: 'uid' },\n                }}\n              />\n            </Box>\n          </Tab>\n          <Tab title=\"Map\">\n            <Box>\n              <LocationMap hexes={hexes} locations={locations} />\n            </Box>\n          </Tab>\n          <Tab title=\"Countries\">\n            <Box>\n              <CountryMap hexes={hexes} locations={locations} countries={countries} />\n            </Box>\n          </Tab>\n        </Tabs>\n            {show && <Layer>\n              <EditTask\n                update={() => {\n                  setShow(false);\n                }\n                }/>\n            </Layer>}\n      </Box>\n</IsoCountContext1.Provider>\n)\n  ;\n};\n\nexport default Locations;\n","/Users/davidedelhart/Documents/repos/workworkwork-next/src/pages/logs.js",[],[],"/Users/davidedelhart/Documents/repos/workworkwork-next/src/pages/navigation.jsx",[],[],"/Users/davidedelhart/Documents/repos/workworkwork-next/src/pages/taskTypes/Ticket.jsx",["228","229","230"],[],"import { Box, Grid, ResponsiveContext, Text } from 'grommet';\nimport React, { useContext, useMemo } from 'react';\nimport { getCell, getTaskTypeGrid, ROW_BOX } from '../../components/ux-constants';\nimport { TicketCell } from '../../components/TicketCell';\n\nconst Ticket = ({ current, children }) => {\n  const size = useContext(ResponsiveContext);\n  const GRID = useMemo(() => getTaskTypeGrid(size), [size]);\n  const CELL = useMemo(() => getCell(size), [size]);\n\n  if (!current) {\n    return null;\n  }\n  return (\n    <Box\n      {...ROW_BOX}\n      background=\"ticket-bg\"\n      border={{\n        color: 'ticket', size: '1px',\n      }} margin={{ bottom: '1rem', top: '1rem' }}>\n      <Grid {...GRID}>\n        <TicketCell name=\"id\" item={current} />\n        <TicketCell name=\"name\" item={current} />\n        <TicketCell name=\"order\" item={current}/>\n        <TicketCell name=\"interval\" item={current}/>\n        <TicketCell name=\"notes\" item={current} />\n        <Box\n          gridArea=\"control\"\n          {...CELL} direction=\"row-reverse\">\n          <Box direction=\"row\">{children}</Box>\n        </Box>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default Ticket;\n","/Users/davidedelhart/Documents/repos/workworkwork-next/src/pages/taskTypes/edit/[id].jsx",["231","232","233","234","235","236","237","238","239"],["240"],"/* eslint-disable react/no-array-index-key */\nimport {\n  Box,\n  Button,\n  Grid,\n  Heading,\n  Layer,\n  ResponsiveContext, Spinner,\n  Text,\n  TextInput,\n} from 'grommet';\nimport { useRouter } from 'next/router';\nimport React, { useContext, useEffect, useMemo, useState } from 'react';\nimport { Add, FormDown, FormUp } from 'grommet-icons';\nimport sortBy from 'lodash.sortby';\nimport Link from 'next/link';\nimport createModel from '../../../components/model';\nimport FormLabel from '../../../components/FormLabel';\nimport {\n  getCell,\n  getTaskTypeGrid,\n  ROW_BOX,\n  TABLE_BOX,\n} from '../../../components/ux-constants';\nimport EditTaskType from '../../../components/EditTaskType';\nimport Ticket from '../Ticket';\nimport LabelValue from '../../../components/LabelValue';\nimport DeleteButton from '../../../components/DeleteButton';\nimport ModelContext from '../../../components/ModelContext';\nimport EditButton from '../../../components/EditButton';\nimport ParentButton from '../../../components/ParentButton';\n\n\nconst TaskById = () => {\n  const [taskTypes, setTT] = useState([]);\n  const [current, setCurrent] = useState(null);\n  const [showEdit, setShowEdit] = useState(false);\n  const [showAddChild, setShowAddChild] = useState(false);\n  const [children, setChildren] = useState([]);\n\n  const model = useContext(ModelContext);\n  const router = useRouter();\n  const { id } = router.query;\n  const size = React.useContext(ResponsiveContext);\n\n  const CELL = useMemo(() => getCell(size), [size]);\n  const GRID = useMemo(() => getTaskTypeGrid(size), [size]);\n\n  const local = useMemo(() => ({\n    // eslint-disable-next-line camelcase\n    addChild: (parent_id, name, notes) => {\n      model.saveTaskType({\n        parent_id,\n        name,\n        notes,\n      });\n    },\n    deleteTaskType(idToDelete) {\n      model.deleteTaskType(idToDelete)\n        .then(() => {\n          if (idToDelete === id) {\n            router.push('/');\n          }\n        });\n    },\n  }), [model, id]);\n\n  useEffect(() => {\n    const sub = model.base.stream({\n      tableName: 'task_types',\n    }, (records) => {\n      setTT(records.map(r => r.data));\n    });\n    model.pollTaskTypes();\n\n    return () => {\n      sub.unsubscribe();\n    };\n  }, [id, model]);\n\n  useEffect(() => {\n      if (id && taskTypes) {\n        setCurrent(taskTypes.find((tt) => tt.id === id));\n        setChildren(taskTypes.filter((tt) => tt.parent_id === id));\n      }\n    },\n    [id, taskTypes]);\n\n  if (!current) {\n    return <Spinner/>;\n  }\n\n  console.log('current: ', current);\n\n  return <Box {...TABLE_BOX}>\n    <Box direction=\"row\" align=\"center\" fill=\"horizontal\" alignContent=\"start\" gap=\"medium\" pad=\"medium\">\n      <Heading level={1}>\n        <Link href={\"/taskTypes\"}><Text size=\"inherit\" color=\"link\">Task Types</Text></Link>\n        /\n        &quot;{current.name}&quot;\n      </Heading>\n      <Text weight=\"normal\">( {id})</Text>\n    </Box>\n    <Ticket id={id} local={local} current={current}>\n      <>\n        <DeleteButton onClick={() => local.deleteTaskType(id)}/>\n        <EditButton id={current.id} onClick={() => setShowEdit(true)}/>\n        {current.parent_id ? <ParentButton onClick={() => router.push(`/taskTypes/edit/${current.parent_id}`)}/> : ''}\n      </>\n    </Ticket>\n      {sortBy(children, 'order', 'name')\n        .map((tt, typeIndex) => (\n          <Box\n            key={`${tt.id}_${typeIndex}`}\n            {...ROW_BOX}\n            background={(typeIndex % 2 === 0) ? 'stripe' : 'white'}>\n            <Grid{...GRID}>\n              <Box gridArea=\"id\" {...CELL}>\n                <LabelValue label=\"ID\">\n                  <Link href={tt.id}><Text truncate>{tt.order}: {tt.id}</Text></Link>\n                </LabelValue>\n              </Box>\n              <Box\n                gridArea=\"name\"  {...CELL}>\n                <LabelValue label=\"Name\">\n                  {tt.name}\n                </LabelValue>\n              </Box>\n              <Box\n                gridArea=\"notes\" {...CELL}>\n                <LabelValue label=\"Notes\">\n                  {tt.notes}\n                </LabelValue>\n              </Box>\n              <Box\n                gridArea=\"control\" {...CELL} gap=\"small\" align=\"center\" direction=\"row-reverse\">\n                <Box direction=\"row\">\n                  <Button\n                    size=\"small\"\n                    onClick={() => model.demoteTaskType(tt.id)}\n                    icon={<FormUp pad=\"2px\"/>}/>\n                  <DeleteButton onClick={() => model.deleteTaskType(tt.id)}/>\n                  <Button\n                    size=\"small\"\n                    onClick={() => model.promoteTaskType(tt.id)}\n                    icon={<FormDown pad=\"2px\"/>}/>\n                </Box>\n              </Box>\n            </Grid>\n          </Box>\n        ))\n      }\n    {showEdit && <Layer>\n      <EditTaskType\n        id={id}\n        update={() => {\n          setShowEdit(false);\n        }\n        }/>\n    </Layer>}\n    {showAddChild && <Layer>\n      <EditTaskType\n        parent_id={id}\n        update={() => {\n          setShowAddChild(false);\n        }\n        }/>\n    </Layer>}\n  </Box>;\n};\n\nexport default TaskById;\n","/Users/davidedelhart/Documents/repos/workworkwork-next/src/pages/taskTypes/index.js",[],["241"],"/Users/davidedelhart/Documents/repos/workworkwork-next/src/pages/tasks.js",["242","243"],[],"import React, { useState, useEffect, useContext } from 'react';\nimport {\n  Box,\n  Text,\n  Layer, Heading,\n} from 'grommet';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport { create, enums } from '@wonderlandlabs/collect';\nimport { constants } from '@wonderlandlabs/carpenter';\nimport ModelContext from '../components/ModelContext';\nimport EditTask from '../components/EditTask';\nimport TitleBar from '../components/TitleBar';\nimport DelayedDataTable from '../components/DelayedDataTable';\nimport { NodeSet } from '../components/TaskNodes';\nimport TaskEvents from '../components/TaskEvents';\nimport JsonNode from '../components/JsonNode';\n\nconst { binaryOperator } = constants;\n\nconst { FormEnum } = enums;\n\ndayjs.extend(relativeTime);\n\nconst Tasks = () => {\n  const [taskTypes, setTT] = useState(null);\n  const [tasks, setTasks] = useState(null);\n  const [tasksCounted, setTasksCounted] = useState(false);\n  const [show, setShow] = React.useState();\n  const model = useContext(ModelContext);\n\n  const TASK_COLS = [\n    {\n      property: 'id',\n      primary: true,\n      header: 'ID',\n      size: '12rem',\n      render: ({ id }) => (<Text truncate>{id}</Text>),\n    },\n    {\n      property: 'task_type_id',\n      header: 'Type',\n      render: ({ task_type_id }) => {\n        const type = taskTypes.find((type) => type.id === task_type_id);\n        return type ? type.name : '?';\n      },\n    },\n    {\n      property: 'createdAt',\n      header: 'Created At',\n      size: '20rem',\n      render: ({ createdAt }) => {\n        if (!createdAt) {\n          return '';\n        }\n        let date = createdAt;\n        if (typeof date === 'string') {\n          date = new Date(date);\n        }\n        const d = dayjs(date);\n       // const f = d.fromNow(true);\n        return d.format('D.M.YY - HH:mm');\n      },\n    },\n    {\n      property: 'status', header: 'Status',\n    },\n    {\n      property: 'childTasks',\n      header: 'Children',\n      size: '6rem',\n      render: (({ id }) => model.taskChildrenCount(id) || ''),\n    },\n    {\n      property: 'data',\n      header: 'Data',\n      render: (({ data }) => <JsonNode expand={false} data={data} size=\"xsmall\" else=\"---\" />),\n    },\n  ];\n  useEffect(() => {\n    const sub = model.base.stream({\n      tableName: 'tasks',\n    }, (records) => {\n      setTasks(records.map(r => r.data));\n    });\n\n    const subTypes = model.base.stream({\n      tableName: 'task_types',\n    }, (records) => {\n      setTT(records.map(r => r.data));\n    });\n\n    let onTimeout = null;\n    function delayedPoll () {\n      model.pollTasks();\n      onTimeout = setTimeout(() => {\n        delayedPoll();\n      }, 60 * 1000);\n    }\n    delayedPoll();\n\n    model.pollTaskTypes();\n\n    return () => {\n      clearTimeout(onTimeout);\n      sub.unsubscribe();\n      subTypes.unsubscribe();\n    };\n  }, [model]);\n\n  return (\n    <Box pad=\"large\">\n      <TitleBar\n        label=\"Tasks\"\n        createLabel=\"Create Task\"\n        onCreate={() => setShow(true)}\n      />\n      <Box align=\"start\">\n        <DelayedDataTable\n          data={(tasks && taskTypes) && tasks.filter((t) => !t.parent_task_id)}\n          cols={TASK_COLS}\n          tableParams={{\n            sort: { direction: 'desc', property: 'createdAt' },\n            rowDetails: (row) => (\n              <Box>\n                <TaskEvents task={row} />\n                  <NodeSet root={row.id} />\n              </Box>\n            ),\n          }}\n        />\n      </Box>\n      {show && <Layer>\n        <EditTask\n          update={() => {\n            setShow(false);\n          }\n          }/>\n      </Layer>}\n    </Box>\n\n  );\n};\n\nexport default Tasks;\n",{"ruleId":"244","severity":1,"message":"245","line":359,"column":36,"nodeType":"246","messageId":"247","endLine":359,"endColumn":46},{"ruleId":"244","severity":1,"message":"245","line":363,"column":13,"nodeType":"246","messageId":"247","endLine":363,"endColumn":23},{"ruleId":"248","severity":1,"message":"249","line":5,"column":53,"nodeType":"250","messageId":"251","endLine":5,"endColumn":69},{"ruleId":"252","severity":1,"message":"253","line":37,"column":6,"nodeType":"254","endLine":37,"endColumn":17,"suggestions":"255"},{"ruleId":"256","severity":1,"message":"257","line":62,"column":1,"nodeType":"258","messageId":"259","endLine":62,"endColumn":133},{"ruleId":"244","severity":1,"message":"260","line":21,"column":37,"nodeType":"246","messageId":"247","endLine":21,"endColumn":46},{"ruleId":"244","severity":1,"message":"260","line":26,"column":63,"nodeType":"246","messageId":"247","endLine":26,"endColumn":72},{"ruleId":"252","severity":1,"message":"253","line":50,"column":6,"nodeType":"254","endLine":50,"endColumn":17,"suggestions":"261"},{"ruleId":"244","severity":1,"message":"260","line":112,"column":42,"nodeType":"246","messageId":"247","endLine":112,"endColumn":51},{"ruleId":"256","severity":1,"message":"262","line":125,"column":1,"nodeType":"258","messageId":"259","endLine":125,"endColumn":132},{"ruleId":"256","severity":1,"message":"263","line":10,"column":1,"nodeType":"258","messageId":"259","endLine":10,"endColumn":130},{"ruleId":"264","severity":1,"message":"265","line":4,"column":1,"nodeType":"266","endLine":34,"endColumn":3},{"ruleId":"248","severity":1,"message":"249","line":19,"column":11,"nodeType":"250","messageId":"251","endLine":19,"endColumn":18},{"ruleId":"244","severity":1,"message":"267","line":38,"column":11,"nodeType":"246","messageId":"247","endLine":38,"endColumn":23},{"ruleId":"252","severity":1,"message":"268","line":43,"column":66,"nodeType":"254","endLine":43,"endColumn":73,"suggestions":"269"},{"ruleId":"248","severity":1,"message":"249","line":46,"column":11,"nodeType":"250","messageId":"251","endLine":46,"endColumn":24},{"ruleId":"248","severity":1,"message":"249","line":12,"column":5,"nodeType":"250","messageId":"251","endLine":12,"endColumn":14},{"ruleId":"256","severity":1,"message":"270","line":116,"column":1,"nodeType":"258","messageId":"259","endLine":116,"endColumn":122},{"ruleId":"264","severity":1,"message":"265","line":165,"column":1,"nodeType":"266","endLine":405,"endColumn":3},{"ruleId":"256","severity":1,"message":"270","line":168,"column":1,"nodeType":"258","messageId":"259","endLine":168,"endColumn":122},{"ruleId":"248","severity":1,"message":"249","line":22,"column":24,"nodeType":"250","messageId":"251","endLine":22,"endColumn":38},{"ruleId":"248","severity":1,"message":"249","line":15,"column":64,"nodeType":"250","messageId":"251","endLine":15,"endColumn":74},{"ruleId":"256","severity":1,"message":"271","line":40,"column":1,"nodeType":"258","messageId":"259","endLine":40,"endColumn":126},{"ruleId":"248","severity":1,"message":"249","line":36,"column":14,"nodeType":"250","messageId":"251","endLine":36,"endColumn":25},{"ruleId":"248","severity":1,"message":"249","line":36,"column":26,"nodeType":"250","messageId":"251","endLine":36,"endColumn":37},{"ruleId":"252","severity":1,"message":"268","line":160,"column":6,"nodeType":"254","endLine":160,"endColumn":8,"suggestions":"272"},{"ruleId":"252","severity":1,"message":"273","line":167,"column":6,"nodeType":"254","endLine":167,"endColumn":12,"suggestions":"274"},{"ruleId":"252","severity":1,"message":"273","line":171,"column":6,"nodeType":"254","endLine":171,"endColumn":8,"suggestions":"275"},{"ruleId":"252","severity":1,"message":"276","line":188,"column":6,"nodeType":"254","endLine":188,"endColumn":48,"suggestions":"277"},{"ruleId":"252","severity":1,"message":"278","line":194,"column":6,"nodeType":"254","endLine":194,"endColumn":30,"suggestions":"279"},{"ruleId":"252","severity":1,"message":"280","line":88,"column":6,"nodeType":"254","endLine":88,"endColumn":11,"suggestions":"281"},{"ruleId":"252","severity":1,"message":"282","line":132,"column":89,"nodeType":"246","endLine":132,"endColumn":92},{"ruleId":"252","severity":1,"message":"283","line":132,"column":89,"nodeType":"246","endLine":132,"endColumn":92,"suggestions":"284"},{"ruleId":"248","severity":1,"message":"249","line":16,"column":7,"nodeType":"250","messageId":"251","endLine":16,"endColumn":19},{"ruleId":"248","severity":1,"message":"249","line":21,"column":13,"nodeType":"250","messageId":"251","endLine":21,"endColumn":22},{"ruleId":"248","severity":1,"message":"249","line":29,"column":11,"nodeType":"250","messageId":"251","endLine":29,"endColumn":20},{"ruleId":"244","severity":1,"message":"260","line":53,"column":9,"nodeType":"246","messageId":"247","endLine":53,"endColumn":18},{"ruleId":"252","severity":1,"message":"285","line":66,"column":7,"nodeType":"254","endLine":66,"endColumn":18,"suggestions":"286"},{"ruleId":"248","severity":1,"message":"249","line":95,"column":15,"nodeType":"250","messageId":"251","endLine":95,"endColumn":29},{"ruleId":"248","severity":1,"message":"249","line":115,"column":13,"nodeType":"250","messageId":"251","endLine":115,"endColumn":25},{"ruleId":"248","severity":1,"message":"249","line":117,"column":18,"nodeType":"250","messageId":"251","endLine":117,"endColumn":27},{"ruleId":"248","severity":1,"message":"249","line":118,"column":34,"nodeType":"250","messageId":"251","endLine":118,"endColumn":43},{"ruleId":"248","severity":1,"message":"249","line":124,"column":34,"nodeType":"250","messageId":"251","endLine":124,"endColumn":43},{"ruleId":"248","severity":1,"message":"249","line":130,"column":34,"nodeType":"250","messageId":"251","endLine":130,"endColumn":43},{"ruleId":"248","severity":1,"message":"249","line":136,"column":36,"nodeType":"250","messageId":"251","endLine":136,"endColumn":45},{"ruleId":"244","severity":1,"message":"260","line":51,"column":16,"nodeType":"246","messageId":"247","endLine":51,"endColumn":25,"suppressions":"287"},{"ruleId":"244","severity":1,"message":"260","line":49,"column":18,"nodeType":"246","messageId":"247","endLine":49,"endColumn":27,"suppressions":"288"},{"ruleId":"244","severity":1,"message":"267","line":43,"column":18,"nodeType":"246","messageId":"247","endLine":43,"endColumn":30},{"ruleId":"244","severity":1,"message":"267","line":44,"column":59,"nodeType":"246","messageId":"247","endLine":44,"endColumn":71},"camelcase","Identifier 'hex_shares' is not in camel case.","Identifier","notCamelCase","react/jsx-props-no-spreading","Prop spreading is forbidden","JSXSpreadAttribute","noSpreading","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'update'. Either include it or remove the dependency array. If 'update' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["289"],"max-len","This line has a length of 132. Maximum allowed is 120.","Program","max","Identifier 'parent_id' is not in camel case.",["290"],"This line has a length of 131. Maximum allowed is 120.","This line has a length of 129. Maximum allowed is 120.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","Identifier 'task_type_id' is not in camel case.","React Hook useMemo has a missing dependency: 'model'. Either include it or remove the dependency array.",["291"],"This line has a length of 121. Maximum allowed is 120.","This line has a length of 125. Maximum allowed is 120.",["292"],"React Hook useEffect has a missing dependency: 'model'. Either include it or remove the dependency array.",["293"],["294"],"React Hook useMemo has missing dependencies: '$resolution' and 'leaf'. Either include them or remove the dependency array. Outer scope values like 'ThreeGlobe' aren't valid dependencies because mutating them doesn't re-render the component.",["295"],"React Hook useEffect has a missing dependency: '$features'. Either include it or remove the dependency array.",["296"],"React Hook useMemo has a missing dependency: 'LOC_COLS'. Either include it or remove the dependency array.",["297"],"React Hook useMemo was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","React Hook useMemo has missing dependencies: 'iso' and 'locations'. Either include them or remove the dependency array.",["298"],"React Hook useMemo has a missing dependency: 'router'. Either include it or remove the dependency array.",["299"],["300"],["301"],{"desc":"302","fix":"303"},{"desc":"302","fix":"304"},{"desc":"305","fix":"306"},{"desc":"307","fix":"308"},{"desc":"309","fix":"310"},{"desc":"307","fix":"311"},{"desc":"312","fix":"313"},{"desc":"314","fix":"315"},{"desc":"316","fix":"317"},{"desc":"318","fix":"319"},{"desc":"320","fix":"321"},{"kind":"322","justification":"323"},{"kind":"322","justification":"323"},"Update the dependencies array to be: [model, id, update]",{"range":"324","text":"325"},{"range":"326","text":"325"},"Update the dependencies array to be: [child.id, model]",{"range":"327","text":"328"},"Update the dependencies array to be: [model]",{"range":"329","text":"330"},"Update the dependencies array to be: [leaf, model]",{"range":"331","text":"332"},{"range":"333","text":"330"},"Update the dependencies array to be: [leaf, $resolution]",{"range":"334","text":"335"},"Update the dependencies array to be: [time, globe, continent, $features]",{"range":"336","text":"337"},"Update the dependencies array to be: [LOC_COLS, iso]",{"range":"338","text":"339"},"Update the dependencies array to be: [iso, locations]",{"range":"340","text":"341"},"Update the dependencies array to be: [model, id, router]",{"range":"342","text":"343"},"directive","",[1269,1280],"[model, id, update]",[1422,1433],[1222,1229],"[child.id, model]",[4689,4691],"[model]",[4914,4920],"[leaf, model]",[4979,4981],[5579,5621],"[leaf, $resolution]",[5718,5742],"[time, globe, continent, $features]",[2412,2417],"[LOC_COLS, iso]",[3431,3434],"[iso, locations]",[1963,1974],"[model, id, router]"]